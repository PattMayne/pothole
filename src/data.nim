# Copyright Â© Louie Quartz 2022
# Licensed under AGPL version 3 or later
#
# data.nim  ;;  Functions for handling Pothole-specific data types.
# The actual data types are stored in lib.nim

# From Pothole
import lib

# From Nim's standard library
import std/[oids, strutils]

# User data type, which represents actual users in the database.
# Note: Most of these are escaped using strutils.escape()
# You can use strutils.unescape() to remove that effect
# But make sure to escape them again.
#
# The following are made safe like so:
# id: plain, generated by std/oids
# handle: checked against unsafeHandleChars, escaped and toLowerAscii()
# name: If it doesn't exist then it's taken from handle. escaped.
# email: checked against unsafeHandleChars, escaped and toLowerAscii()
# bio: escaped()
# password: escaped()
# salt: plain, generated by std/oids
#
# -    id: string     =   An OID that represents the actual user (Db: blob primary key)
# -    handle: string =   A string containing the user's actual username (Db: varchar unique not null)
# -    name: string   =   A string containing the user's display name (Db: varchar)
# -    local: bool    =   A boolean indicating if this user is from this instance (Db: boolean)
# -    email: string  =   A string containing the user's email (Db: varchar)
# -    bio: string    =   A string containing the user's biography (Db: varchar)
# -    salt: string   =   The actual salt with which to hash the password. (Db: varchar not null)
# -    password:string=   A string to store a hashed + salted password (Db: varchar not null)

# Post data type, which represents posts in the database.
# -    id: string      =    A OID that represents the actual post (Db: blob primary key)
# -    sender: string  =    A string containing the sender of the post (Db: varchar not null)
# -    written: string =    A timestamp of when the post was written (Db: timestamp not null)
# -    updated: string =    A timestamp of when the post was updated (or null if it wasn't) (Db: timestamp)
# -    post: string    =    Actual JSON Data for the post (Db: varchar)
# - recipients:seq[str]=    A sequence of recipients (Db: varchar)

# Various helper procedures related to Users and Posts
# db.nim contains the actual user-creation procedures

# The fillEverything boolean tells us whether or not
# we should add everything ourselves or just leave it empty
# This procedure validates every field and makes it ready for
# transfer to database. Make sure to unescape.
proc safeifyUser*(handle: var string, password: var string, name: string, email: var string, bio: var string, fillEverything: bool = true): User =
  # Basic validation
  # We only need handle and password, the rest can be guessed.
  if isEmptyOrWhitespace(handle) or isEmptyOrWhitespace(password):
    var toBePrinted: seq[string] = @[handle,name,email,bio,password]
    error("Missing required fields for adding users\nUser: " & $toBePrinted,"lib.newUser")
  
  # Now let's add the info
  var newuser: User;

  # But first let's make this lowercase and safe.
  handle = toLowerAscii(escape(handle))

  # Let's loop over every character and check it against unsafeHandleChars
  for x in 0 .. len(handle) - 1:
    if handle[x] in unsafeHandleChars:
      handle = handle.replace($handle[x],"")
  
  newuser.handle = handle
  
  # Now let's do the display name.
  if isEmptyOrWhitespace(name):
    newuser.name = newuser.handle
  else:
    newuser.name = escape(name)

  # Now email.
  # We can use the same thing as we did with handle
  if isEmptyOrWhitespace(email):
    newuser.email = ""
  else:
    newuser.email = toLowerAscii(escape(email))

    # Let's loop over every character and check it against unsafeHandleChars
    for x in 0 .. len(email) - 1:
      if email[x] in unsafeHandleChars:
        email = email.replace($email[x],"")

    newuser.email = email

  # A bit of heuristics for local.
  if name.contains("@") and name.contains("."):
    newuser.local = false
  else:
    newuser.local = true

  # Bio.
  if isEmptyOrWhitespace(bio):
    newuser.bio = "Hi! I\'m " & $newuser.name
  else:
    newuser.bio = escape(bio)
   
  # Store password and escape it
  newuser.password = escape(password)
  # Fill everything that's missing
  if fillEverything:
    newuser.id = $genOid()
    newuser.salt = $genOid()
  else:
    if len(newuser.id) <= 0:
      newuser.id = ""
    if len(newuser.salt) <= 0:
      newuser.salt = ""
    
